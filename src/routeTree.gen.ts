/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as PatientsIndexImport } from "./routes/patients/index";
import { Route as PatientsIdImport } from "./routes/patients/$id";

// Create/Update Routes

const PatientsIndexRoute = PatientsIndexImport.update({
  id: "/patients/",
  path: "/patients/",
  getParentRoute: () => rootRoute,
} as any);

const PatientsIdRoute = PatientsIdImport.update({
  id: "/patients/$id",
  path: "/patients/$id",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/patients/$id": {
      id: "/patients/$id";
      path: "/patients/$id";
      fullPath: "/patients/$id";
      preLoaderRoute: typeof PatientsIdImport;
      parentRoute: typeof rootRoute;
    };
    "/patients/": {
      id: "/patients/";
      path: "/patients";
      fullPath: "/patients";
      preLoaderRoute: typeof PatientsIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/patients/$id": typeof PatientsIdRoute;
  "/patients": typeof PatientsIndexRoute;
}

export interface FileRoutesByTo {
  "/patients/$id": typeof PatientsIdRoute;
  "/patients": typeof PatientsIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/patients/$id": typeof PatientsIdRoute;
  "/patients/": typeof PatientsIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/patients/$id" | "/patients";
  fileRoutesByTo: FileRoutesByTo;
  to: "/patients/$id" | "/patients";
  id: "__root__" | "/patients/$id" | "/patients/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  PatientsIdRoute: typeof PatientsIdRoute;
  PatientsIndexRoute: typeof PatientsIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  PatientsIdRoute: PatientsIdRoute,
  PatientsIndexRoute: PatientsIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/patients/$id",
        "/patients/"
      ]
    },
    "/patients/$id": {
      "filePath": "patients/$id.tsx"
    },
    "/patients/": {
      "filePath": "patients/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
